* Info
Jake Goulding
jake.goulding@gmail.com
jakegoulding.com
github.com/shepmaster
@jakegoulding

* Employment

Vivisimo, Inc (acquired by IBM in 2012) October 2005 - Present
Pittsburgh, PA

Vivisimo Velocity (now IBM InfoSphere Data Explorer) is an enterprise
search engine with a strong focus on connectivity, security, and
performance. It is primarily written in C, but also uses XSLT, Java,
and a proprietary configuration language.

** Major Projects
*** Spelling corrector
Many spelling suggestions are based on a static dictionary that by
necessity needs to be very general. To improve the quality and
usefulness of suggestions, I created a spelling corrector that
leveraged data collected for the search engine to produce
automatically customized spelling suggestions. I also led small teams
to increase the query-time and creation-time performance as well as
reduce disk usage.

*** Autocomplete
While many end-users know what they want to search for, others want
more guidance or are more interested in browsing existing search
results. I led a small team that added the ability to automatically
suggest high-value, frequently occurring words and phrases to help
users find more relevant results.

*** Efficient paging
The Velocity product allows querying multiple sources of data which
are then sorted together. This means that you cannot simply request a
count of results and start offset from each source. I led a small team
to implement an efficient paging algorithm that requests the minimum
amount of data required to sort the results, and lazily loads the
complete set of data when the user views that set of results.

*** Thai segmenter
The Velocity search engine requires the ability to distinguish
individual words in a stream of text. Languages such as Thai do not
have natural word breaks (like spaces in English), and require extra
linguistic processing. I researched the available open source
implementations, evaluated each, and integrated the final choice into
our product.

*** Re-architect collections
Early versions of Velocity treated the major components of indexing
data as separate batch jobs, making updates to the search index
difficult and time-consuming. I worked on a team to rearrange these
components to allow for online updates, focusing on the framework
that would ensure each component would start and stop as
appropriate. I also managed the communication between the components
and the administrative tool.

*** 64-bit Windows port
Query time performance greatly benefits from having most of the search
index in RAM. Over Velocity's lifetime, 64-bit machines came into
general use. While Velocity already supported 64-bit Linux,
approximately half of our customers used Windows. I updated our build
scripts to correctly recognize and support 64-bit Windows, and updated
both our support libraries and our code to operate correctly in the
new environment.

*** Collection broker
A large OEM partner wanted to reduce costs by using a single machine
to serve results from many search collections, greater than the CPU
and memory resources of that computer. I created a broker service that
would monitor the memory usage of the entire machine, as well as the
status of each individual search collection. When resources became
limited, the broker would intelligently take collections offline or
deny incoming requests.

*** Rich preview
When searching for a specific document, many users identify the
correct result by the visual layout of the document. Other users may
not be able to open the application associated with the document.  To
better support these users, I led a small team to integrate a
third-party library to create replicas of the original document using
HTML and images.

*** Index compression
Search collections can take up a large amount of disk space, but the
indexed data has a high level of redundancy. I added transparent
compression to the indexed data, which also involved refactoring
existing reading and writing functionality first.

*** SOAP / REST API
The Velocity search engine originally operated on a pull model, which
was well-suited for crawling websites. New customers required the
ability to control how and when data was indexed by pushing data into
the system. I created many API functions to expose the major
functionality of managing, adding data to, and querying search
collections, as well as the SOAP and REST endpoints to expose these API
functions.

*** Application Builder
The Velocity product provides a large amount of functionality, but
each customer is required to configure and customize it to suit their
needs. In this way, Velocity was similar to a database or any other
underlying piece of technology. In order to provide more immediate
benefit, I was part of a cross-functional team building a brand-new
application on top of Velocity that targeted a specific market niche.

* Education
Georgia Institute of Technology - 2005
Bachelors in Computer Science
Bachelors in Electrical Engineering
Highest Honors

* Passions
Automated testing
Test-driven design
Agile methodologies
Learning and teaching
Open source contribution
Version control (git)
Build systems (Make, CMake)

* Open source contributions
git
Ruby
JRuby
cURL
glib
RSpec
Capybara

* Talks
DON'T PANIC: The Hitchhiker's Guide to Debugging
Jointly presented with Carol Nichols
Codemash, 2013

Structure of RSpec tests
Pittsburgh Ruby, 2013
http://jakegoulding.com/presentations/rspec-structure/

Experiment with story splitting
Pittsburgh Agile, 2011
http://www.meetup.com/PittsburghAgile/events/33441392/

* Tutoring
I always want to learn more, and teaching others is an amazing way of
solidifying my own knowledge. To this end, I tutor people new to Ruby
and Ruby on Rails.

* Programming languages
** Extremely comfortable
C, Ruby, Java, Bash, XSLT

** Comfortable
C++, JavaScript

** Extremely interested in
Clojure, Go, Objective-C
